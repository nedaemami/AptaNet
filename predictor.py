# -*- coding: utf-8 -*-
"""Predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wy6sj_pwFDr3ET8Yw5hY0sq7exGgWT66
"""

import numpy as np
from imblearn.under_sampling import NeighbourhoodCleaningRule
import pandas

import keras
from keras.models import Sequential
from keras.layers import Dense

from keras.models import Sequential
from keras.layers import Dense

from keras.layers import Dense
from imblearn.under_sampling import NeighbourhoodCleaningRule
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import SelectFromModel

# Load dataset
dataset = pandas.read_csv("./Data/Supplementary_Table_S1.csv", ";")

x = dataset.iloc[:, 1:640]
print(x)
# print(x)
y = dataset['Class']
print(y)

clf = RandomForestClassifier(n_estimators=300, max_depth=9,
                             random_state=0)
clf.fit(x, y)
clf.feature_importances_
model = SelectFromModel(clf, prefit=True)
x = model.transform(x)
x.shape

ncr = NeighbourhoodCleaningRule()
x_resampled, y_resampled = ncr.fit_resample(x, y)

print(x_resampled)
print(y_resampled)

# Optimization Algorithm
opt = keras.optimizers.RMSprop(learning_rate=0.00014, rho=0.9, epsilon=None, decay=0.0)

# Multi Layer Perceptron Model
model = Sequential()
model.add(Dense(128, input_dim=193, activation='relu'))
keras.layers.AlphaDropout(0.3, noise_shape=None, seed=None)

model.add(Dense(128, activation='relu'))
keras.layers.AlphaDropout(0.3, noise_shape=None, seed=None)

model.add(Dense(128, activation='relu'))
keras.layers.AlphaDropout(0.3, noise_shape=None, seed=None)

model.add(Dense(128, activation='relu'))
keras.layers.AlphaDropout(0.3, noise_shape=None, seed=None)

model.add(Dense(128, activation='relu'))
keras.layers.AlphaDropout(0.3, noise_shape=None, seed=None)

model.add(Dense(128, activation='relu'))
keras.layers.AlphaDropout(0.3, noise_shape=None, seed=None)

model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

# Estimator

# model.fit(x_resampled, y_resampled, epochs=200)
model.load_weights('./checkpoints/a')
score = model.evaluate(x_resampled, y_resampled)

# save model for future use
model.save_weights('./checkpoints/a')

# Predictor
# f = np.expand_dims(f, axis=0)
f = ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]
preds = model.predict(f)
model.predict_classes(f, batch_size=1, verbose=1)

# Print the Results
print(preds)
# print(pp)
